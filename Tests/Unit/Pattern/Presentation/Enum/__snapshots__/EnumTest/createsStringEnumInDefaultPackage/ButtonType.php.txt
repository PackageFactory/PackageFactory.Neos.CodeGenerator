<?php declare(strict_types=1);
namespace Vendor\Default\Presentation\Button;

/*
 * This file is part of the Vendor.Default package
 */

use Neos\Flow\Annotations as Flow;

/**
 * @Flow\Proxy(false)
 */
final class ButtonType
{
    public const BUTTON_TYPE_LINK = 'link';
    public const BUTTON_TYPE_BUTTON = 'button';
    public const BUTTON_TYPE_SUBMIT = 'submit';

    /**
     * @var string
     */
    private $value;

    /**
     * @param string $value
     */
    private function __construct(string $value)
    {
        $this->value = $value;
    }

    /**
     * @param string $string
     * @return self
     */
    public static function fromString(string $string): self
    {
        if (!in_array($string, self::getValues())) {
            throw ButtonTypeIsInvalid::becauseItMustBeOneOfTheDefinedConstants($string);
        }

        return new self($string);
    }

    /**
     * @return self
     */
    public static function link(): self
    {
        return new self(self::BUTTON_TYPE_LINK);
    }

    /**
     * @return self
     */
    public static function button(): self
    {
        return new self(self::BUTTON_TYPE_BUTTON);
    }

    /**
     * @return self
     */
    public static function submit(): self
    {
        return new self(self::BUTTON_TYPE_SUBMIT);
    }

    /**
     * @return boolean
     */
    public function isLink(): bool
    {
        return $this->value === self::BUTTON_TYPE_LINK;
    }

    /**
     * @return boolean
     */
    public function isButton(): bool
    {
        return $this->value === self::BUTTON_TYPE_BUTTON;
    }

    /**
     * @return boolean
     */
    public function isSubmit(): bool
    {
        return $this->value === self::BUTTON_TYPE_SUBMIT;
    }

    /**
     * @return array|string[]
     */
    public static function getValues(): array
    {
        return [
            self::BUTTON_TYPE_LINK,
            self::BUTTON_TYPE_BUTTON,
            self::BUTTON_TYPE_SUBMIT,
        ];
    }

    /**
     * @return string
     */
    public function getValue(): string
    {
        return $this->value;
    }

    /**
     * @return string
     */
    public function __toString(): string
    {
        return $this->value;
    }
}
